class Solution {
public:

int merge(vector<int> &nums, int l, int r, int mid) {
    int count = 0;
    int i = l;
    int j = mid+1;
    for(int i = l; i<=mid; i++) {
        while(j<=r && (long long)nums[j]*2<(long long)nums[i]) {
            j++;
        }
        count += j-(mid+1);  
    }
    
    vector<int> aux;
    i = l;
    j = mid+1;
    
    while(i<=mid && j<=r){
        if(nums[i]<nums[j]) {
            aux.push_back(nums[i]);
            i++;
        }
        else {
            aux.push_back(nums[j]);
            j++;
        }
    }
    while(i<=mid) {
        aux.push_back(nums[i]);
        i++;
    }
    while(j<=r) {
        aux.push_back(nums[j]);
        j++;
    }
    
    for(int k = 0; k<aux.size(); k++) {
        nums[k+l] = aux[k];
    }
    return count;
}

int mergeSort(vector<int> &nums, int l, int r) {
    if(l>=r) return 0;
    else {
        int mid = l+(r-l)/2;
        int count = 0;
        count += mergeSort(nums, l, mid);
        count += mergeSort(nums, mid+1, r);
        count += merge(nums, l, r, mid);
        return count;
    }
}

int reversePairs(vector<int>& nums) {
    return mergeSort(nums, 0, nums.size()-1);
}
};